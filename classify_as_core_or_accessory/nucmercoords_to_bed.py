'''
Creates a bedfile with non-redundant aligned regions of a query from MUMmer output


Parameters:

	coords_file (str):  Tabulated file generated from a delta file (nucmer output) by show-coords.
	min_length (int) : minimum length of the aligned region for it to be included
	min_identify (float) : minimum percent identity of the aligned region for it to be included.
	out_dir (str): name of the output folder. Bedfiles created will be saved here as <coords_file>.bed and <coords_file>.nr.bed
	
Notes:
Tested with bedtools v2.27.1 and MUMmer 3.23

'''

import argparse, os

description = "Creates a bedfile with non-redundant aligned regions of a query from MUMmer output"

def init_args():

	parser = argparse.ArgumentParser(description=description)
	
	input_options = parser.add_argument_group('Input options')
	input_options.add_argument("-coords_file", dest='coords_file', type = str, \
		help='Tabulated file with aligned regions, generated by show-coords (MUmmer)', required=True)
	
	settings = parser.add_argument_group('Alignment filters')
	settings.add_argument("-min_length", dest='min_length', type=str, default = '1000', \
		help = "Minimum length of alignment to be included")
	settings.add_argument("-min_identity", dest='min_identity', type=str, default = '90.0', \
		help = "Minimum percent identity of alignment to be included")	

	output_options = parser.add_argument_group('Output settings')
	output_options.add_argument("-out_dir", dest='out_dir', type = str, \
		help='Name of the output folder', required=True)

	parser.add_argument("-v", "--verbose", default = False, help="Print settings report", action="store_true")

	args = parser.parse_args()


	if args.verbose:
		report = '\n\n##################################\n#\n#   SETTINGS\n'
		argsdict = vars(args)
		for var in argsdict.keys():
			report += '#\t'+var+'\t'+str(argsdict[var])+'\n'
		report += '#\n##################################\n\n'
		print(report)
	
	return args, report


def coords_to_bed(coords_file, min_identity, min_length, out_dir, logfile=None):
	'''
	Creates a bedfile with non-redundant aligned regions of a query from MUMmer output
	
	Args:
		coords_file (str):  tabulated file generated from a delta file (nucmer output) by show-coords.
		min_length (int) : minimum length of the aligned region for it to be included
		min_identify (float) : minimum percent identity of the aligned region for it to be included.
		out_dir (str): name of the output folder. Bedfiles created will be saved here as <coords_file>.bed and <coords_file>.nr.bed

	Returns:
	the name of the bedfile (str)
	'''

	# make sure numerical comparisons are executed correctly
	os.system('export LC_NUMERIC=C') 

	# filter and extract columns from coords file with awk
	coords_ext  = coords_file.split('.')[-1]
	awk_out_bed = out_dir + os.path.basename(coords_file).replace(coords_ext, 'bed')

	# use awk to extract relevant columns, sort wrt position with sort, compensate for 1-offset in MUMmer
	coords2bed_cmnd = "awk -v OFS='\\t' '{if ($10 >= "+min_identity+" && $7 >= "+min_length+") print $12,$1-1,$2}' "\
	+coords_file+" | sort -k1,1 -k2,2n > "+awk_out_bed
	if os.system(coords2bed_cmnd) == 0:
		if logfile != None: logfile.write(coords2bed_cmnd+'\n')

		# merge overlapping and touching regions 
		merge_out_bed = awk_out_bed[:-3]+'nr.bed'
		bedtools_merge_cmnd = 'bedtools merge -i '+awk_out_bed+" > "+merge_out_bed
		if os.system(bedtools_merge_cmnd) == 0:
			if logfile != None: logfile.write(bedtools_merge_cmnd+'\n')
			return merge_out_bed
		else:
			print('bedtools merge failed for '+awk_out_bed)
	else:
		print('awk failed for '+coords_file)		

	return None



if __name__ == "__main__":

	args = init_args()
	logfile = open(args.out_dir+'cmnds', 'w')
	print('Alignments in '+args.coordsfile+' converted to bed in '\
		+coords_to_bed(args.coords_file, args.min_identity, args.min_length, args.out_dir, logfile))
	logfile.close()


